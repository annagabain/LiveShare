// Generated by CoffeeScript 2.4.1
var Curl, DELETE, GET, PATCH, POST, PUT, assert, check, checkAll, curl, rest;

({assert, rest} = require('./utilities'));

//###
// This file is making asserts about the API.
//###
Curl = require('curl-request');

curl = new Curl();

curl.put = (url) => { // Monkey Patching PUT as it is missing.
  curl._setUrl(url);
  curl.setOpt(curl.libcurl.option.CUSTOMREQUEST, 'PUT');
  return curl._submit();
};

check = async function(url, body, expect, type) {
  var response;
  response = (await curl.setBody(body)[type]('localhost:3000' + url));
  return assert(JSON.parse(response.body), expect);
};

DELETE = function() {
  return check(...arguments, 'delete');
};

POST = function() {
  return check(...arguments, 'post');
};

PUT = function() {
  return check(...arguments, 'put');
};

GET = function() {
  return check(...arguments, 'get');
};

PATCH = function() {
  return check(...arguments, 'patch');
};

//########################### This is the specific part
checkAll = async function() {
  console.clear();
  await DELETE('/todos', {}, []);
  await POST('/todos', {
    text: "buy food"
  }, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: "fetch lamps"
  }, {
    id: 2,
    text: "fetch lamps",
    done: false
  });
  await POST('/todos', {
    text: "walk dog"
  }, {
    id: 3,
    text: "walk dog",
    done: false
  });
  await POST('/todos', {
    text: "feed cat"
  }, {
    id: 4,
    text: "feed cat",
    done: false
  });
  await POST('/todos', {
    text: "köp räksmörgåsar"
  }, {
    id: 5,
    text: "köp räksmörgåsar",
    done: false
  });
  await GET('/todos/1', {}, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: 'Cut the grass'
  }, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await GET('/todos/6', {}, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await PUT('/todos/6', {
    text: "Klipp gräset",
    done: true
  }, {
    id: 6,
    text: "Klipp gräset",
    done: true
  });
  await PATCH('/todos/6', {
    done: false
  }, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PATCH('/todos/6', {}, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PUT('/todos/6', {
    done: true
  }, {
    id: 6,
    done: true
  });
  await DELETE('/todos/6', {}, {
    id: 6,
    done: true
  });
  return console.log(rest());
};

checkAll();

//###########################

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXGFzc2VydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsSUFBQSxFQUFBOztBQUFBLENBQUEsQ0FBQyxNQUFELEVBQVMsSUFBVCxDQUFBLEdBQWlCLE9BQUEsQ0FBUSxhQUFSLENBQWpCLEVBQUE7Ozs7O0FBTUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxjQUFSOztBQUVQLElBQUEsR0FBTyxJQUFJLElBQUosQ0FBQTs7QUFFUCxJQUFJLENBQUMsR0FBTCxHQUFXLENBQUMsR0FBRCxDQUFBLEdBQUEsRUFBQTtFQUNWLElBQUksQ0FBQyxPQUFMLENBQWEsR0FBYjtFQUNBLElBQUksQ0FBQyxNQUFMLENBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBaEMsRUFBK0MsS0FBL0M7U0FDQSxJQUFJLENBQUMsT0FBTCxDQUFBO0FBSFU7O0FBS1gsS0FBQSxHQUFRLE1BQUEsUUFBQSxDQUFDLEdBQUQsRUFBSyxJQUFMLEVBQVUsTUFBVixFQUFpQixJQUFqQixDQUFBO0FBQ1AsTUFBQTtFQUFBLFFBQUEsR0FBVyxDQUFBLE1BQU0sSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFiLENBQW1CLENBQUEsSUFBQSxDQUFuQixDQUF5QixnQkFBQSxHQUFtQixHQUE1QyxDQUFOO1NBQ1gsTUFBQSxDQUFPLElBQUksQ0FBQyxLQUFMLENBQVcsUUFBUSxDQUFDLElBQXBCLENBQVAsRUFBa0MsTUFBbEM7QUFGTzs7QUFJUixNQUFBLEdBQVMsUUFBQSxDQUFBLENBQUE7U0FBRyxLQUFBLENBQU0sR0FBRyxTQUFULEVBQW9CLFFBQXBCO0FBQUg7O0FBQ1QsSUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO1NB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O0VBQ04sTUFBTSxHQUFBLENBQU8sVUFBUCxFQUFrQjtJQUFDLElBQUEsRUFBSztFQUFOLENBQWxCLEVBQTJDO0lBQUMsRUFBQSxFQUFHLENBQUo7SUFBTSxJQUFBLEVBQUs7RUFBWCxDQUEzQztFQUNOLE1BQU0sTUFBQSxDQUFPLFVBQVAsRUFBa0IsQ0FBQSxDQUFsQixFQUEyQztJQUFDLEVBQUEsRUFBRyxDQUFKO0lBQU0sSUFBQSxFQUFLO0VBQVgsQ0FBM0M7U0FDTixPQUFPLENBQUMsR0FBUixDQUFZLElBQUEsQ0FBQSxDQUFaO0FBaEJVOztBQWtCWCxRQUFBLENBQUE7O0FBN0NBIiwic291cmNlc0NvbnRlbnQiOlsie2Fzc2VydCwgcmVzdH0gPSByZXF1aXJlICcuL3V0aWxpdGllcydcclxuXHJcbiMjIyNcclxuIyBUaGlzIGZpbGUgaXMgbWFraW5nIGFzc2VydHMgYWJvdXQgdGhlIEFQSS5cclxuIyMjI1xyXG5cclxuQ3VybCA9IHJlcXVpcmUgJ2N1cmwtcmVxdWVzdCdcclxuXHJcbmN1cmwgPSBuZXcgQ3VybCgpXHJcblxyXG5jdXJsLnB1dCA9ICh1cmwpID0+ICMgTW9ua2V5IFBhdGNoaW5nIFBVVCBhcyBpdCBpcyBtaXNzaW5nLlxyXG5cdGN1cmwuX3NldFVybCB1cmxcclxuXHRjdXJsLnNldE9wdCBjdXJsLmxpYmN1cmwub3B0aW9uLkNVU1RPTVJFUVVFU1QsICdQVVQnXHJcblx0Y3VybC5fc3VibWl0KClcclxuIFxyXG5jaGVjayA9ICh1cmwsYm9keSxleHBlY3QsdHlwZSkgLT5cclxuXHRyZXNwb25zZSA9IGF3YWl0IGN1cmwuc2V0Qm9keShib2R5KVt0eXBlXSAnbG9jYWxob3N0OjMwMDAnICsgdXJsXHJcblx0YXNzZXJ0IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSksIGV4cGVjdFxyXG5cclxuREVMRVRFID0gLT5cdGNoZWNrIC4uLmFyZ3VtZW50cywgJ2RlbGV0ZSdcclxuUE9TVCA9ICAgLT5cdGNoZWNrIC4uLmFyZ3VtZW50cywgJ3Bvc3QnXHJcblBVVCA9ICAgIC0+XHRjaGVjayAuLi5hcmd1bWVudHMsICdwdXQnXHJcbkdFVCA9ICAgIC0+XHRjaGVjayAuLi5hcmd1bWVudHMsICdnZXQnXHJcblBBVENIID0gIC0+XHRjaGVjayAuLi5hcmd1bWVudHMsICdwYXRjaCdcclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgVGhpcyBpcyB0aGUgc3BlY2lmaWMgcGFydFxyXG5cclxuY2hlY2tBbGwgPSAtPlxyXG5cdGNvbnNvbGUuY2xlYXIoKVxyXG5cdGF3YWl0IERFTEVURSAnL3RvZG9zJyx7fSwgICAgICAgICAgICAgICAgICAgICAgICBbXVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDpcImJ1eSBmb29kXCJ9LCAgICAgICAgIHtpZDoxLHRleHQ6XCJidXkgZm9vZFwiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUE9TVCAgICcvdG9kb3MnLHt0ZXh0OlwiZmV0Y2ggbGFtcHNcIn0sICAgICAge2lkOjIsdGV4dDpcImZldGNoIGxhbXBzXCIsZG9uZTpmYWxzZX1cclxuXHRhd2FpdCBQT1NUICAgJy90b2Rvcycse3RleHQ6XCJ3YWxrIGRvZ1wifSwgICAgICAgICB7aWQ6Myx0ZXh0Olwid2FsayBkb2dcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDpcImZlZWQgY2F0XCJ9LCAgICAgICAgIHtpZDo0LHRleHQ6XCJmZWVkIGNhdFwiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUE9TVCAgICcvdG9kb3MnLHt0ZXh0Olwia8O2cCByw6Rrc23DtnJnw6VzYXJcIn0sIHtpZDo1LHRleHQ6XCJrw7ZwIHLDpGtzbcO2cmfDpXNhclwiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgR0VUICAgICcvdG9kb3MvMScse30sICAgICAgICAgICAgICAgICAgICAgIHtpZDoxLHRleHQ6XCJidXkgZm9vZFwiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUE9TVCAgICcvdG9kb3MnLHt0ZXh0OidDdXQgdGhlIGdyYXNzJ30sICAgIHtpZDo2LHRleHQ6XCJDdXQgdGhlIGdyYXNzXCIsZG9uZTpmYWxzZX1cclxuXHRhd2FpdCBHRVQgICAgJy90b2Rvcy82Jyx7fSwgICAgICAgICAgICAgICAgICAgICAge2lkOjYsdGV4dDpcIkN1dCB0aGUgZ3Jhc3NcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBVVCAgICAnL3RvZG9zLzYnLHt0ZXh0OlwiS2xpcHAgZ3LDpHNldFwiLGRvbmU6dHJ1ZX0sIHtpZDo2LHRleHQ6XCJLbGlwcCBncsOkc2V0XCIsZG9uZTp0cnVlfVxyXG5cdGF3YWl0IFBBVENIICAnL3RvZG9zLzYnLHtkb25lOmZhbHNlfSwgICAgICAgICAgICB7aWQ6Nix0ZXh0OlwiS2xpcHAgZ3LDpHNldFwiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUEFUQ0ggICcvdG9kb3MvNicse30sICAgICAgICAgICAgICAgICAgICAgIHtpZDo2LHRleHQ6XCJLbGlwcCBncsOkc2V0XCIsZG9uZTpmYWxzZX1cclxuXHRhd2FpdCBQVVQgICAgJy90b2Rvcy82Jyx7ZG9uZTp0cnVlfSwgICAgICAgICAgICAge2lkOjYsZG9uZTp0cnVlfVxyXG5cdGF3YWl0IERFTEVURSAnL3RvZG9zLzYnLHt9LCAgICAgICAgICAgICAgICAgICAgICB7aWQ6Nixkb25lOnRydWV9XHJcblx0Y29uc29sZS5sb2cgcmVzdCgpXHJcblxyXG5jaGVja0FsbCgpXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuIl19
//# sourceURL=c:\github\LiveShare\2019-09-26\coffee\assert.coffee