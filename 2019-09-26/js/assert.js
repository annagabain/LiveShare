// Generated by CoffeeScript 2.4.1
var Curl, DELETE, GET, PATCH, POST, PUT, assert, chai, check, checkAll, curl;

chai = require('chai');

assert = chai.assert.deepEqual;

//###
// This file is making asserts about the API.
//###
Curl = require('curl-request');

curl = new Curl();

curl.put = (url) => { // Monkey Patching PUT as it is missing.
  curl._setUrl(url);
  curl.setOpt(curl.libcurl.option.CUSTOMREQUEST, 'PUT');
  return curl._submit();
};

check = async function(url, body, expect, type) {
  var response;
  response = (await curl.setBody(body)[type]('localhost:3000' + url));
  return assert(response.body, JSON.stringify(expect));
};

DELETE = function() {
  return check(...arguments, 'delete');
};

POST = function() {
  return check(...arguments, 'post');
};

PUT = function() {
  return check(...arguments, 'put');
};

GET = function() {
  return check(...arguments, 'get');
};

PATCH = function() {
  return check(...arguments, 'patch');
};

//########################### This is the specific part
checkAll = async function() {
  await DELETE('/todos', {}, []);
  await POST('/todos', {
    text: "buy food"
  }, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: "fetch lamps"
  }, {
    id: 2,
    text: "fetch lamps",
    done: false
  });
  await POST('/todos', {
    text: "walk dog"
  }, {
    id: 3,
    text: "walk dog",
    done: false
  });
  await POST('/todos', {
    text: "feed cat"
  }, {
    id: 4,
    text: "feed cat",
    done: false
  });
  await POST('/todos', {
    text: "köp räksmörgåsar"
  }, {
    id: 5,
    text: "köp räksmörgåsar",
    done: false
  });
  await GET('/todos/1', {}, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: 'Cut the grass'
  }, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await GET('/todos/6', {}, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await PUT('/todos/6', {
    text: "Klipp gräset",
    done: true
  }, {
    id: 6,
    text: "Klipp gräset",
    done: true
  });
  await PATCH('/todos/6', {
    done: false
  }, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PATCH('/todos/6', {}, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PUT('/todos/6', {
    done: true
  }, {
    id: 6,
    done: true
  });
  await DELETE('/todos/6', {}, {
    id: 6,
    done: true
  });
  return console.log('Ready!');
};

checkAll();

//###########################

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXGFzc2VydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBOztBQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7QUFDUCxNQUFBLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQURyQjs7Ozs7QUFPQSxJQUFBLEdBQU8sT0FBQSxDQUFRLGNBQVI7O0FBRVAsSUFBQSxHQUFPLElBQUksSUFBSixDQUFBOztBQUVQLElBQUksQ0FBQyxHQUFMLEdBQVcsQ0FBQyxHQUFELENBQUEsR0FBQSxFQUFBO0VBQ1YsSUFBSSxDQUFDLE9BQUwsQ0FBYSxHQUFiO0VBQ0EsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFoQyxFQUErQyxLQUEvQztTQUNBLElBQUksQ0FBQyxPQUFMLENBQUE7QUFIVTs7QUFLWCxLQUFBLEdBQVEsTUFBQSxRQUFBLENBQUMsR0FBRCxFQUFLLElBQUwsRUFBVSxNQUFWLEVBQWlCLElBQWpCLENBQUE7QUFDUCxNQUFBO0VBQUEsUUFBQSxHQUFXLENBQUEsTUFBTSxJQUFJLENBQUMsT0FBTCxDQUFhLElBQWIsQ0FBbUIsQ0FBQSxJQUFBLENBQW5CLENBQXlCLGdCQUFBLEdBQW1CLEdBQTVDLENBQU47U0FDWCxNQUFBLENBQU8sUUFBUSxDQUFDLElBQWhCLEVBQXNCLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUF0QjtBQUZPOztBQUlSLE1BQUEsR0FBUyxRQUFBLENBQUEsQ0FBQTtTQUFHLEtBQUEsQ0FBTSxHQUFHLFNBQVQsRUFBb0IsUUFBcEI7QUFBSDs7QUFDVCxJQUFBLEdBQVMsUUFBQSxDQUFBLENB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LFVBQVAsRUFBa0I7SUFBQyxJQUFBLEVBQUs7RUFBTixDQUFsQixFQUEyQztJQUFDLEVBQUEsRUFBRyxDQUFKO0lBQU0sSUFBQSxFQUFLO0VBQVgsQ0FBM0M7RUFDTixNQUFNLE1BQUEsQ0FBTyxVQUFQLEVBQWtCLENBQUEsQ0FBbEIsRUFBMkM7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSztFQUFYLENBQTNDO1NBQ04sT0FBTyxDQUFDLEdBQVIsQ0FBWSxRQUFaO0FBZlU7O0FBZ0JYLFFBQUEsQ0FBQTs7QUE1Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJjaGFpID0gcmVxdWlyZSAnY2hhaSdcclxuYXNzZXJ0ID0gY2hhaS5hc3NlcnQuZGVlcEVxdWFsXHJcblxyXG4jIyMjXHJcbiMgVGhpcyBmaWxlIGlzIG1ha2luZyBhc3NlcnRzIGFib3V0IHRoZSBBUEkuXHJcbiMjIyNcclxuXHJcbkN1cmwgPSByZXF1aXJlICdjdXJsLXJlcXVlc3QnXHJcblxyXG5jdXJsID0gbmV3IEN1cmwoKVxyXG5cclxuY3VybC5wdXQgPSAodXJsKSA9PiAjIE1vbmtleSBQYXRjaGluZyBQVVQgYXMgaXQgaXMgbWlzc2luZy5cclxuXHRjdXJsLl9zZXRVcmwgdXJsXHJcblx0Y3VybC5zZXRPcHQgY3VybC5saWJjdXJsLm9wdGlvbi5DVVNUT01SRVFVRVNULCAnUFVUJ1xyXG5cdGN1cmwuX3N1Ym1pdCgpXHJcbiBcclxuY2hlY2sgPSAodXJsLGJvZHksZXhwZWN0LHR5cGUpIC0+XHJcblx0cmVzcG9uc2UgPSBhd2FpdCBjdXJsLnNldEJvZHkoYm9keSlbdHlwZV0gJ2xvY2FsaG9zdDozMDAwJyArIHVybFxyXG5cdGFzc2VydCByZXNwb25zZS5ib2R5LCBKU09OLnN0cmluZ2lmeSBleHBlY3RcclxuXHJcbkRFTEVURSA9IC0+XHRjaGVjayAuLi5hcmd1bWVudHMsICdkZWxldGUnXHJcblBPU1QgPSAgIC0+XHRjaGVjayAuLi5hcmd1bWVudHMsICdwb3N0J1xyXG5QVVQgPSAgICAtPlx0Y2hlY2sgLi4uYXJndW1lbnRzLCAncHV0J1xyXG5HRVQgPSAgICAtPlx0Y2hlY2sgLi4uYXJndW1lbnRzLCAnZ2V0J1xyXG5QQVRDSCA9ICAtPlx0Y2hlY2sgLi4uYXJndW1lbnRzLCAncGF0Y2gnXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIFRoaXMgaXMgdGhlIHNwZWNpZmljIHBhcnRcclxuXHJcbmNoZWNrQWxsID0gLT5cclxuXHRhd2FpdCBERUxFVEUgJy90b2Rvcycse30sICAgICAgICAgICAgICAgICAgICAgICAgW11cclxuXHRhd2FpdCBQT1NUICAgJy90b2Rvcycse3RleHQ6XCJidXkgZm9vZFwifSwgICAgICAgICB7aWQ6MSx0ZXh0OlwiYnV5IGZvb2RcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDpcImZldGNoIGxhbXBzXCJ9LCAgICAgIHtpZDoyLHRleHQ6XCJmZXRjaCBsYW1wc1wiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUE9TVCAgICcvdG9kb3MnLHt0ZXh0Olwid2FsayBkb2dcIn0sICAgICAgICAge2lkOjMsdGV4dDpcIndhbGsgZG9nXCIsZG9uZTpmYWxzZX1cclxuXHRhd2FpdCBQT1NUICAgJy90b2Rvcycse3RleHQ6XCJmZWVkIGNhdFwifSwgICAgICAgICB7aWQ6NCx0ZXh0OlwiZmVlZCBjYXRcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDpcImvDtnAgcsOka3Ntw7ZyZ8Olc2FyXCJ9LCB7aWQ6NSx0ZXh0Olwia8O2cCByw6Rrc23DtnJnw6VzYXJcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IEdFVCAgICAnL3RvZG9zLzEnLHt9LCAgICAgICAgICAgICAgICAgICAgICB7aWQ6MSx0ZXh0OlwiYnV5IGZvb2RcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDonQ3V0IHRoZSBncmFzcyd9LCAgICB7aWQ6Nix0ZXh0OlwiQ3V0IHRoZSBncmFzc1wiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgR0VUICAgICcvdG9kb3MvNicse30sICAgICAgICAgICAgICAgICAgICAgIHtpZDo2LHRleHQ6XCJDdXQgdGhlIGdyYXNzXCIsZG9uZTpmYWxzZX1cclxuXHRhd2FpdCBQVVQgICAgJy90b2Rvcy82Jyx7dGV4dDpcIktsaXBwIGdyw6RzZXRcIixkb25lOnRydWV9LCB7aWQ6Nix0ZXh0OlwiS2xpcHAgZ3LDpHNldFwiLGRvbmU6dHJ1ZX1cclxuXHRhd2FpdCBQQVRDSCAgJy90b2Rvcy82Jyx7ZG9uZTpmYWxzZX0sICAgICAgICAgICAge2lkOjYsdGV4dDpcIktsaXBwIGdyw6RzZXRcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBBVENIICAnL3RvZG9zLzYnLHt9LCAgICAgICAgICAgICAgICAgICAgICB7aWQ6Nix0ZXh0OlwiS2xpcHAgZ3LDpHNldFwiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUFVUICAgICcvdG9kb3MvNicse2RvbmU6dHJ1ZX0sICAgICAgICAgICAgIHtpZDo2LGRvbmU6dHJ1ZX1cclxuXHRhd2FpdCBERUxFVEUgJy90b2Rvcy82Jyx7fSwgICAgICAgICAgICAgICAgICAgICAge2lkOjYsZG9uZTp0cnVlfVxyXG5cdGNvbnNvbGUubG9nICdSZWFkeSEnXHJcbmNoZWNrQWxsKClcclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiXX0=
//# sourceURL=c:\github\LiveShare\2019-09-26\coffee\assert.coffee