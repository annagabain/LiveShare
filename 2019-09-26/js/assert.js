// Generated by CoffeeScript 2.4.1
var Curl, DELETE, GET, PATCH, POST, PUT, assert, chai, check, checkAll, curl;

chai = require('chai');

assert = chai.assert.deepEqual;

//###
// This file is making asserts about the API.
//###
Curl = require('curl-request');

curl = new Curl();

curl.put = (url) => { // Monkey Patching PUT as it is missing.
  curl._setUrl(url);
  curl.setOpt(curl.libcurl.option.CUSTOMREQUEST, 'PUT');
  return curl._submit();
};

check = async function(type, url, body, expect) {
  var response;
  response = (await curl.setBody(body)[type]('localhost:3000' + url));
  return assert(response.body, JSON.stringify(expect));
};

DELETE = function(url, body, expect) {
  return check('delete', url, body, expect);
};

POST = function(url, body, expect) {
  return check('post', url, body, expect);
};

PUT = function(url, body, expect) {
  return check('put', url, body, expect);
};

GET = function(url, body, expect) {
  return check('get', url, body, expect);
};

PATCH = function(url, body, expect) {
  return check('patch', url, body, expect);
};

//########################### This is the specific part
checkAll = async function() {
  await DELETE('/todos', {}, []);
  await POST('/todos', {
    text: "buy food"
  }, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: "fetch lamps"
  }, {
    id: 2,
    text: "fetch lamps",
    done: false
  });
  await POST('/todos', {
    text: "walk dog"
  }, {
    id: 3,
    text: "walk dog",
    done: false
  });
  await POST('/todos', {
    text: "feed cat"
  }, {
    id: 4,
    text: "feed cat",
    done: false
  });
  await POST('/todos', {
    text: "köp räksmörgåsar"
  }, {
    id: 5,
    text: "köp räksmörgåsar",
    done: false
  });
  await GET('/todos/1', {}, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: 'Cut the grass'
  }, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await GET('/todos/6', {}, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await PUT('/todos', {
    id: 6,
    text: "Klipp gräset",
    done: true
  }, {
    id: 6,
    text: "Klipp gräset",
    done: true
  });
  await PATCH('/todos', {
    id: 6,
    done: false
  }, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PATCH('/todos', {
    id: 6
  }, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PUT('/todos', {
    id: 6,
    done: true
  }, {
    id: 6,
    done: true
  });
  await DELETE('/todos/6', {}, {
    id: 6,
    done: true
  });
  return console.log('Ready!');
};

checkAll();

//###########################

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXGFzc2VydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBOztBQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7QUFDUCxNQUFBLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQURyQjs7Ozs7QUFPQSxJQUFBLEdBQU8sT0FBQSxDQUFRLGNBQVI7O0FBRVAsSUFBQSxHQUFPLElBQUksSUFBSixDQUFBOztBQUVQLElBQUksQ0FBQyxHQUFMLEdBQVcsQ0FBQyxHQUFELENBQUEsR0FBQSxFQUFBO0VBQ1YsSUFBSSxDQUFDLE9BQUwsQ0FBYSxHQUFiO0VBQ0EsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFoQyxFQUErQyxLQUEvQztTQUNBLElBQUksQ0FBQyxPQUFMLENBQUE7QUFIVTs7QUFLWCxLQUFBLEdBQVEsTUFBQSxRQUFBLENBQUMsSUFBRCxFQUFNLEdBQU4sRUFBVSxJQUFWLEVBQWUsTUFBZixDQUFBO0FBQ1AsTUFBQTtFQUFBLFFBQUEsR0FBVyxDQUFBLE1BQU0sSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFiLENBQW1CLENBQUEsSUFBQSxDQUFuQixDQUF5QixnQkFBQSxHQUFtQixHQUE1QyxDQUFOO1NBQ1gsTUFBQSxDQUFPLFFBQVEsQ0FBQyxJQUFoQixFQUFzQixJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsQ0FBdEI7QUFGTzs7QUFJUixNQUFBLEdBQVMsUUFBQSxDQUFDLEdBQUQsRUFBSyxJQUFMLEVBQVUsTUFBVixDQUFBO1NBQXFCLEtBQUEsQ0FBTSxRQUFOLEVBQWUsR0FBZixFQUFtQixJQUFuQixFQUF3QixNQUF4QjtBQUFyQjs7QUFDVCxJQUFBLEdBQVMsUUFBQSxDQUFDLEdBQUQsRUFBSyxJQUFMLEVBQVUsTUFBVixDQUFBO1NBQXFCLEtBQUEsQ0FBTSxNQUFOLEVBQWEsR0FBYixFQUFpQixJQUFqQixFQUFzQixNQUF0QjtBQUFyQjs7QUFDVCxHQUFBLEdBQVMsUUFBQSxDQUFDLEdBQUQsRUFBSyxJQUFMLEVBQVUsTUFBVixDQUFBO1NBQXFCLEtBQUEsQ0FBTSxLQUFOLEVBQVksR0FBWixFQUFnQixJQUFoQixFQUFxQixNQUFyQjtBQUFyQjs7QUFDVCxHQUFBLEdBQVMsUUFBQSxDQUFDLEdBQUQsRUFBSyxJQUFMLEVBQVUsTUFBVixDQUFBO1NBQXFCLEtBQUEsQ0FBTSxLQUFOLEVBQVksR0FBWixFQUFnQixJQUFoQixFQUFxQixNQUFyQjtBQUFyQjs7QUFDVCxLQUFBLEdBQVMsUUFBQSxDQUFDLEdBQUQsRUFBSyxJQUFMLEVBQVUsTUFBVixDQUFBO1NBQXFCLEtBQUEsQ0FBTSxPQUFOLEVBQWMsR0FBZCxFQUFrQixJQUFsQixFQUF1QixNQUF2QjtBQUFyQixFQXhCVDs7O0FBNEJBLFFBQUEsR0FBVyxNQUFBLFFBQUEsQ0FBQSxDQUFBO0VBQ1YsTUFBTSxNQUFBLENBQU8sUUFBUCxFQUFnQixDQUFBLENBQWhCLEVBQTJDLEVBQTNDO0VBQ04sTUFBTSxJQUFBLENBQU8sUUFBUCxFQUFnQjtJQUFDLElBQUEsRUFBSztFQUFOLENBQWhCLEVBQTJDO0lBQUMsRUFBQSxFQUFHLENBQUo7SUFBTSxJQUFBLEVBQUssVUFBWDtJQUFzQixJQUFBLEVBQUs7RUFBM0IsQ0FBM0M7RUFDTixNQUFNLElBQUEsQ0FBTyxRQUFQLEVBQWdCO0lBQUMsSUFBQSxFQUFLO0VBQU4sQ0FBaEIsRUFBMkM7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSyxhQUFYO0lBQXlCLElBQUEsRUFBSztFQUE5QixDQUEzQztFQUNOLE1BQU0sSUFBQSxDQUFPLFFBQVAsRUFBZ0I7SUFBQyxJQUFBLEVBQUs7RUFBTixDQUFoQixFQUEyQztJQUFDLEVBQUEsRUFBRyxDQUFKO0lBQU0sSUFBQSxFQUFLLFVBQVg7SUFBc0IsSUFBQSxFQUFLO0VBQTNCLENBQTNDO0VBQ04sTUFBTSxJQUFBLENBQU8sUUFBUCxFQUFnQjtJQUFDLElBQUEsRUFBSztFQUFOLENBQWhCLEVBQTJDO0lBQUMsRUFBQSxFQUFHLENBQUo7SUFBTSxJQUFBLEVBQUssVUFBWDtJQUFzQixJQUFBLEVBQUs7RUFBM0IsQ0FBM0M7RUFDTixNQUFNLElBQUEsQ0FBTyxRQUFQLEVBQWdCO0lBQUMsSUFBQSxFQUFLO0VBQU4sQ0FBaEIsRUFBMkM7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSyxrQkFBWDtJQUE4QixJQUFBLEVBQUs7RUFBbkMsQ0FBM0M7RUFDTixNQUFNLEdBQUEsQ0FBTyxVQUFQLEVBQWtCLENBQUEsQ0FBbEIsRUFBMkM7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSyxVQUFYO0lBQXNCLElBQUEsRUFBSztFQUEzQixDQUEzQztFQUNOLE1BQU0sSUFBQSxDQUFPLFFBQVAsRUFBZ0I7SUFBQyxJQUFBLEVBQUs7RUFBTixDQUFoQixFQUEyQztJQUFDLEVBQUEsRUFBRyxDQUFKO0lBQU0sSUFBQSxFQUFLLGVBQVg7SUFBMkIsSUFBQSxFQUFLO0VBQWhDLENBQTNDO0VBQ04sTUFBTSxHQUFBLENBQU8sVUFBUCxFQUFrQixDQUFBLENBQWxCLEVBQTJDO0lBQUMsRUFBQSxFQUFHLENBQUo7SUFBTSxJQUFBLEVBQUssZUFBWDtJQUEyQixJQUFBLEVBQUs7RUFBaEMsQ0FBM0M7RUFDTixNQUFNLEdBQUEsQ0FBTyxRQUFQLEVBQWdCO0lBQUMsRUFBQSxFQUFHLENBQUo7SUFBTSxJQUFBLEVBQUssY0FBWDtJQUEwQixJQUFBLEVBQUs7RUFBL0IsQ0FBaEIsRUFBc0Q7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSyxjQUFYO0lBQTBCLElBQUEsRUFBSztFQUEvQixDQUF0RDtFQUNOLE1BQU0sS0FBQSxDQUFPLFFBQVAsRUFBZ0I7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSztFQUFYLENBQWhCLEVBQTJDO0lBQUMsRUFBQSxFQUFHLENBQUo7SUFBTSxJQUFBLEVBQUssY0FBWDtJQUEwQixJQUFBLEVBQUs7RUFBL0IsQ0FBM0M7RUFDTixNQUFNLEtBQUEsQ0FBTyxRQUFQLEVBQWdCO0lBQUMsRUFBQSxFQUFHO0VBQUosQ0FBaEIsRUFBMkM7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSyxjQUFYO0lBQTBCLElBQUEsRUFBSztFQUEvQixDQUEzQztFQUNOLE1BQU0sR0FBQSxDQUFPLFFBQVAsRUFBZ0I7SUFBQyxFQUFBLEVBQUcsQ0FBSjtJQUFNLElBQUEsRUFBSztFQUFYLENBQWhCLEVBQTJDO0lBQUMsRUFBQSxFQUFHLENBQUo7SUFBTSxJQUFBLEVBQUs7RUFBWCxDQUEzQztFQUNOLE1BQU0sTUFBQSxDQUFPLFVBQVAsRUFBa0IsQ0FBQSxDQUFsQixFQUEyQztJQUFDLEVBQUEsRUFBRyxDQUFKO0lBQU0sSUFBQSxFQUFLO0VBQVgsQ0FBM0M7U0FDTixPQUFPLENBQUMsR0FBUixDQUFZLFFBQVo7QUFmVTs7QUFnQlgsUUFBQSxDQUFBOztBQTVDQSIsInNvdXJjZXNDb250ZW50IjpbImNoYWkgPSByZXF1aXJlICdjaGFpJ1xyXG5hc3NlcnQgPSBjaGFpLmFzc2VydC5kZWVwRXF1YWxcclxuXHJcbiMjIyNcclxuIyBUaGlzIGZpbGUgaXMgbWFraW5nIGFzc2VydHMgYWJvdXQgdGhlIEFQSS5cclxuIyMjI1xyXG5cclxuQ3VybCA9IHJlcXVpcmUgJ2N1cmwtcmVxdWVzdCdcclxuXHJcbmN1cmwgPSBuZXcgQ3VybCgpXHJcblxyXG5jdXJsLnB1dCA9ICh1cmwpID0+ICMgTW9ua2V5IFBhdGNoaW5nIFBVVCBhcyBpdCBpcyBtaXNzaW5nLlxyXG5cdGN1cmwuX3NldFVybCB1cmxcclxuXHRjdXJsLnNldE9wdCBjdXJsLmxpYmN1cmwub3B0aW9uLkNVU1RPTVJFUVVFU1QsICdQVVQnXHJcblx0Y3VybC5fc3VibWl0KClcclxuIFxyXG5jaGVjayA9ICh0eXBlLHVybCxib2R5LGV4cGVjdCkgLT5cclxuXHRyZXNwb25zZSA9IGF3YWl0IGN1cmwuc2V0Qm9keShib2R5KVt0eXBlXSAnbG9jYWxob3N0OjMwMDAnICsgdXJsXHJcblx0YXNzZXJ0IHJlc3BvbnNlLmJvZHksIEpTT04uc3RyaW5naWZ5IGV4cGVjdFxyXG5cclxuREVMRVRFID0gKHVybCxib2R5LGV4cGVjdCkgLT5cdGNoZWNrICdkZWxldGUnLHVybCxib2R5LGV4cGVjdFxyXG5QT1NUID0gICAodXJsLGJvZHksZXhwZWN0KSAtPlx0Y2hlY2sgJ3Bvc3QnLHVybCxib2R5LGV4cGVjdFxyXG5QVVQgPSAgICAodXJsLGJvZHksZXhwZWN0KSAtPlx0Y2hlY2sgJ3B1dCcsdXJsLGJvZHksZXhwZWN0XHJcbkdFVCA9ICAgICh1cmwsYm9keSxleHBlY3QpIC0+XHRjaGVjayAnZ2V0Jyx1cmwsYm9keSxleHBlY3RcclxuUEFUQ0ggPSAgKHVybCxib2R5LGV4cGVjdCkgLT5cdGNoZWNrICdwYXRjaCcsdXJsLGJvZHksZXhwZWN0XHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIFRoaXMgaXMgdGhlIHNwZWNpZmljIHBhcnRcclxuXHJcbmNoZWNrQWxsID0gLT5cclxuXHRhd2FpdCBERUxFVEUgJy90b2Rvcycse30sICAgICAgICAgICAgICAgICAgICAgICAgW11cclxuXHRhd2FpdCBQT1NUICAgJy90b2Rvcycse3RleHQ6XCJidXkgZm9vZFwifSwgICAgICAgICB7aWQ6MSx0ZXh0OlwiYnV5IGZvb2RcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDpcImZldGNoIGxhbXBzXCJ9LCAgICAgIHtpZDoyLHRleHQ6XCJmZXRjaCBsYW1wc1wiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUE9TVCAgICcvdG9kb3MnLHt0ZXh0Olwid2FsayBkb2dcIn0sICAgICAgICAge2lkOjMsdGV4dDpcIndhbGsgZG9nXCIsZG9uZTpmYWxzZX1cclxuXHRhd2FpdCBQT1NUICAgJy90b2Rvcycse3RleHQ6XCJmZWVkIGNhdFwifSwgICAgICAgICB7aWQ6NCx0ZXh0OlwiZmVlZCBjYXRcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDpcImvDtnAgcsOka3Ntw7ZyZ8Olc2FyXCJ9LCB7aWQ6NSx0ZXh0Olwia8O2cCByw6Rrc23DtnJnw6VzYXJcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IEdFVCAgICAnL3RvZG9zLzEnLHt9LCAgICAgICAgICAgICAgICAgICAgICB7aWQ6MSx0ZXh0OlwiYnV5IGZvb2RcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBPU1QgICAnL3RvZG9zJyx7dGV4dDonQ3V0IHRoZSBncmFzcyd9LCAgICB7aWQ6Nix0ZXh0OlwiQ3V0IHRoZSBncmFzc1wiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgR0VUICAgICcvdG9kb3MvNicse30sICAgICAgICAgICAgICAgICAgICAgIHtpZDo2LHRleHQ6XCJDdXQgdGhlIGdyYXNzXCIsZG9uZTpmYWxzZX1cclxuXHRhd2FpdCBQVVQgICAgJy90b2Rvcycse2lkOjYsdGV4dDpcIktsaXBwIGdyw6RzZXRcIixkb25lOnRydWV9LCB7aWQ6Nix0ZXh0OlwiS2xpcHAgZ3LDpHNldFwiLGRvbmU6dHJ1ZX1cclxuXHRhd2FpdCBQQVRDSCAgJy90b2Rvcycse2lkOjYsZG9uZTpmYWxzZX0sICAgICAgICAge2lkOjYsdGV4dDpcIktsaXBwIGdyw6RzZXRcIixkb25lOmZhbHNlfVxyXG5cdGF3YWl0IFBBVENIICAnL3RvZG9zJyx7aWQ6Nn0sICAgICAgICAgICAgICAgICAgICB7aWQ6Nix0ZXh0OlwiS2xpcHAgZ3LDpHNldFwiLGRvbmU6ZmFsc2V9XHJcblx0YXdhaXQgUFVUICAgICcvdG9kb3MnLHtpZDo2LGRvbmU6dHJ1ZX0sICAgICAgICAgIHtpZDo2LGRvbmU6dHJ1ZX1cclxuXHRhd2FpdCBERUxFVEUgJy90b2Rvcy82Jyx7fSwgICAgICAgICAgICAgICAgICAgICAge2lkOjYsZG9uZTp0cnVlfVxyXG5cdGNvbnNvbGUubG9nICdSZWFkeSEnXHJcbmNoZWNrQWxsKClcclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuIl19
//# sourceURL=c:\github\LiveShare\2019-09-26\coffee\assert.coffee