// Generated by CoffeeScript 2.4.1
var Curl, DELETE, GET, PATCH, POST, PUT, _, assert, chai, check, checkAll, curl, okAsserts, range;

chai = require('chai');

_ = require('lodash');

range = _.range;


//assert = chai.assert.deepEqual
okAsserts = '';

assert = function(a, b) {
  var diff, i, j, len, ref, sa, sb;
  sa = JSON.stringify(a);
  sb = JSON.stringify(b);
  sa = sa.replace(/\\/g, '');
  sb = sb.replace(/\\/g, '');
  diff = '';
  ref = range(sa.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (sa[i] === sb[i]) {
      diff += '=';
    } else {
      diff += '!';
      break;
    }
  }
  if (diff.includes('!')) {
    console.log(okAsserts);
    console.log(sa);
    console.log(diff);
    console.log(sb);
    return okAsserts = '';
  } else {
    return okAsserts += '.';
  }
};

//###
// This file is making asserts about the API.
//###
Curl = require('curl-request');

curl = new Curl();

curl.put = (url) => { // Monkey Patching PUT as it is missing.
  curl._setUrl(url);
  curl.setOpt(curl.libcurl.option.CUSTOMREQUEST, 'PUT');
  return curl._submit();
};

check = async function(url, body, expect, type) {
  var response;
  response = (await curl.setBody(body)[type]('localhost:3000' + url));
  return assert(JSON.parse(response.body), expect);
};

DELETE = function() {
  return check(...arguments, 'delete');
};

POST = function() {
  return check(...arguments, 'post');
};

PUT = function() {
  return check(...arguments, 'put');
};

GET = function() {
  return check(...arguments, 'get');
};

PATCH = function() {
  return check(...arguments, 'patch');
};

//########################### This is the specific part
checkAll = async function() {
  console.clear();
  await DELETE('/todos', {}, []);
  await POST('/todos', {
    text: "buy food"
  }, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: "fetch lamps"
  }, {
    id: 2,
    text: "fetch lamps",
    done: false
  });
  await POST('/todos', {
    text: "walk dog"
  }, {
    id: 3,
    text: "walk dog",
    done: false
  });
  await POST('/todos', {
    text: "feed cat"
  }, {
    id: 4,
    text: "feed cat",
    done: false
  });
  await POST('/todos', {
    text: "köp räksmörgåsar"
  }, {
    id: 5,
    text: "köp räksmörgåsar",
    done: false
  });
  await GET('/todos/1', {}, {
    id: 1,
    text: "buy food",
    done: false
  });
  await POST('/todos', {
    text: 'Cut the grass'
  }, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await GET('/todos/6', {}, {
    id: 6,
    text: "Cut the grass",
    done: false
  });
  await PUT('/todos/6', {
    text: "Klipp gräset",
    done: true
  }, {
    id: 6,
    text: "Klipp gräset",
    done: true
  });
  await PATCH('/todos/6', {
    done: false
  }, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PATCH('/todos/6', {}, {
    id: 6,
    text: "Klipp gräset",
    done: false
  });
  await PUT('/todos/6', {
    done: true
  }, {
    id: 6,
    done: true
  });
  await DELETE('/todos/6', {}, {
    id: 6,
    done: true
  });
  return console.log(okAsserts);
};

checkAll();

//###########################

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\LiveShare\2019-09-26\coffee\assert.coffee