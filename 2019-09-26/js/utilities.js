// Generated by CoffeeScript 2.4.1
var Curl, DELETE, GET, PATCH, POST, _, assert, chai, check, curl, okAsserts, rest;

chai = require('chai');

_ = require('lodash');

//assert = chai.assert.deepEqual
okAsserts = '';

assert = function(a, b) {
  var ch, diff, i, j, len, sa, sb;
  sa = JSON.stringify(a);
  sb = JSON.stringify(b);
  sa = sa.replace(/\\/g, '');
  sb = sb.replace(/\\/g, '');
  diff = '';
  for (i = j = 0, len = sa.length; j < len; i = ++j) {
    ch = sa[i];
    if (sa[i] === sb[i]) {
      diff += '='; // same character
    } else {
      diff += '!'; // different character
      break;
    }
  }
  if (diff.includes('!')) { // failed assert
    console.log(okAsserts);
    console.log(sa);
    console.log(diff);
    console.log(sb);
    return okAsserts = '';
  } else {
    return okAsserts += '.'; // ok assert
  }
};

rest = function() {
  return okAsserts;
};

Curl = require('curl-request');

curl = new Curl();

check = async function(url, body, expect, type) {
  var response;
  response = (await curl.setBody(body)[type]('localhost:3000' + url));
  //console.log type, expect
  return assert(JSON.parse(response.body), expect);
};

POST = function() {
  return check(...arguments, 'post');
};

GET = function() {
  return check(...arguments, 'get');
};

PATCH = function() {
  return check(...arguments, 'patch');
};

DELETE = function() {
  return check(...arguments, 'delete');
};

module.exports = {assert, rest, POST, GET, PATCH, DELETE};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHV0aWxpdGllcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQTs7QUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBQ1AsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLEVBREo7OztBQUdBLFNBQUEsR0FBWTs7QUFDWixNQUFBLEdBQVMsUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7QUFDUixNQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBO0VBQUEsRUFBQSxHQUFLLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZjtFQUNMLEVBQUEsR0FBSyxJQUFJLENBQUMsU0FBTCxDQUFlLENBQWY7RUFDTCxFQUFBLEdBQUssRUFBRSxDQUFDLE9BQUgsQ0FBVyxLQUFYLEVBQWlCLEVBQWpCO0VBQ0wsRUFBQSxHQUFLLEVBQUUsQ0FBQyxPQUFILENBQVcsS0FBWCxFQUFpQixFQUFqQjtFQUNMLElBQUEsR0FBTztFQUNQLEtBQUEsNENBQUE7O0lBQ0MsSUFBRyxFQUFHLENBQUEsQ0FBQSxDQUFILEtBQU8sRUFBRyxDQUFBLENBQUEsQ0FBYjtNQUNDLElBQUEsSUFBUSxJQURUO0tBQUEsTUFBQTtNQUdDLElBQUEsSUFBUSxJQUFSO0FBQ0EsWUFKRDs7RUFERDtFQU1BLElBQUcsSUFBSSxDQUFDLFFBQUwsQ0FBYyxHQUFkLENBQUg7SUFDQyxPQUFPLENBQUMsR0FBUixDQUFZLFNBQVo7SUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLEVBQVo7SUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVo7SUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLEVBQVo7V0FDQSxTQUFBLEdBQVksR0FMYjtHQUFBLE1BQUE7V0FPQyxTQUFBLElBQWEsSUFQZDs7QUFaUTs7QUFxQlQsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO1NBQUc7QUFBSDs7QUFFUCxJQUFBLEdBQU8sT0FBQSxDQUFRLGNBQVI7O0FBRVAsSUFBQSxHQUFPLElBQUksSUFBSixDQUFBOztBQUVQLEtBQUEsR0FBUSxNQUFBLFFBQUEsQ0FBQyxHQUFELEVBQUssSUFBTCxFQUFVLE1BQVYsRUFBaUIsSUFBakIsQ0FBQTtBQUNQLE1BQUE7RUFBQSxRQUFBLEdBQVcsQ0FBQSxNQUFNLElBQUksQ0FBQyxPQUFMLENBQWEsSUFBYixDQUFtQixDQUFBLElBQUEsQ0FBbkIsQ0FBeUIsZ0JBQUEsR0FBbUIsR0FBNUMsQ0FBTixFQUFYOztTQUVBLE1BQUEsQ0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLFFBQVEsQ0FBQyxJQUFwQixDQUFQLEVBQWtDLE1BQWxDO0FBSE87O0FBS1IsSUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO1NBQUcsS0FBQSxDQUFNLEdBQUcsU0FBVCxFQUFvQixNQUFwQjtBQUFIOztBQUNULEdBQUEsR0FBUyxRQUFBLENBQUEsQ0FBQTtTQUFHLEtBQUEsQ0FBTSxHQUFHLFNBQVQsRUFBb0IsS0FBcEI7QUFBSDs7QUFDVCxLQUFBLEdBQVMsUUFBQSxDQUFBLENBQUE7U0FBRyxLQUFBLENBQU0sR0FBRyxTQUFULEVBQW9CLE9BQXBCO0FBQUg7O0FBQ1QsTUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO1NBQUcsS0FBQSxDQUFNLEdBQUcsU0FBVCxFQUFvQixRQUFwQjtBQUFIOztBQUVULE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsTUFBRCxFQUFRLElBQVIsRUFBYyxJQUFkLEVBQW1CLEdBQW5CLEVBQXVCLEtBQXZCLEVBQTZCLE1BQTdCIiwic291cmNlc0NvbnRlbnQiOlsiY2hhaSA9IHJlcXVpcmUgJ2NoYWknXHJcbl8gPSByZXF1aXJlICdsb2Rhc2gnXHJcbiNhc3NlcnQgPSBjaGFpLmFzc2VydC5kZWVwRXF1YWxcclxub2tBc3NlcnRzID0gJydcclxuYXNzZXJ0ID0gKGEsYikgLT5cclxuXHRzYSA9IEpTT04uc3RyaW5naWZ5IGFcclxuXHRzYiA9IEpTT04uc3RyaW5naWZ5IGJcclxuXHRzYSA9IHNhLnJlcGxhY2UgL1xcXFwvZywnJ1xyXG5cdHNiID0gc2IucmVwbGFjZSAvXFxcXC9nLCcnXHJcblx0ZGlmZiA9ICcnXHJcblx0Zm9yIGNoLGkgaW4gc2FcclxuXHRcdGlmIHNhW2ldPT1zYltpXVxyXG5cdFx0XHRkaWZmICs9ICc9JyAjIHNhbWUgY2hhcmFjdGVyXHJcblx0XHRlbHNlIFxyXG5cdFx0XHRkaWZmICs9ICchJyAjIGRpZmZlcmVudCBjaGFyYWN0ZXJcclxuXHRcdFx0YnJlYWtcclxuXHRpZiBkaWZmLmluY2x1ZGVzICchJyAjIGZhaWxlZCBhc3NlcnRcclxuXHRcdGNvbnNvbGUubG9nIG9rQXNzZXJ0c1xyXG5cdFx0Y29uc29sZS5sb2cgc2FcclxuXHRcdGNvbnNvbGUubG9nIGRpZmZcclxuXHRcdGNvbnNvbGUubG9nIHNiXHJcblx0XHRva0Fzc2VydHMgPSAnJ1xyXG5cdGVsc2UgXHJcblx0XHRva0Fzc2VydHMgKz0gJy4nICMgb2sgYXNzZXJ0XHJcblxyXG5yZXN0ID0gLT4gb2tBc3NlcnRzXHJcblxyXG5DdXJsID0gcmVxdWlyZSAnY3VybC1yZXF1ZXN0J1xyXG5cclxuY3VybCA9IG5ldyBDdXJsKClcclxuXHJcbmNoZWNrID0gKHVybCxib2R5LGV4cGVjdCx0eXBlKSAtPlxyXG5cdHJlc3BvbnNlID0gYXdhaXQgY3VybC5zZXRCb2R5KGJvZHkpW3R5cGVdICdsb2NhbGhvc3Q6MzAwMCcgKyB1cmxcclxuXHQjY29uc29sZS5sb2cgdHlwZSwgZXhwZWN0XHJcblx0YXNzZXJ0IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSksIGV4cGVjdFxyXG5cclxuUE9TVCA9ICAgLT5cdGNoZWNrIC4uLmFyZ3VtZW50cywgJ3Bvc3QnXHJcbkdFVCA9ICAgIC0+XHRjaGVjayAuLi5hcmd1bWVudHMsICdnZXQnXHJcblBBVENIID0gIC0+XHRjaGVjayAuLi5hcmd1bWVudHMsICdwYXRjaCdcclxuREVMRVRFID0gLT5cdGNoZWNrIC4uLmFyZ3VtZW50cywgJ2RlbGV0ZSdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge2Fzc2VydCxyZXN0LCBQT1NULEdFVCxQQVRDSCxERUxFVEV9XHJcbiJdfQ==
//# sourceURL=c:\github\LiveShare\2019-09-26\coffee\utilities.coffee